import socket
import json
import os
from typing import Dict, List, Union
import struct  

from config import HOST, PORT


class Client:
    def __init__(self):
        self.host = HOST
        self.port = PORT
        self.socket = None
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã
        self.BLUE = '\033[94m'
        self.GREEN = '\033[92m'
        self.RESET = '\033[0m'
        self.RED = '\033[91m'
        self.YELLOW = '\033[93m'

    def connect(self):
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.connect((self.host, self.port))
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def run(self):
        os.system('clear || cls')
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  ls <–ø—É—Ç—å_–∫_–∫–∞—Ç–∞–ª–æ–≥—É> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print("  cd <–ø—É—Ç—å> - —Å–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
        print("  cd .. - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ")
        print("  clear - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å")
        print("  exit - –≤—ã—Ö–æ–¥\n")

        while True:
            try:
                command = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip()
                if command == 'exit':
                    break

                if command.startswith('ls'):
                    parts = command.split(maxsplit=1)
                    directory_path = parts[1].strip() if len(parts) > 1 else ''  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
                    self.request_directory(directory_path)

                elif command.startswith('cd'):
                    parts = command.split(maxsplit=1)
                    if len(parts) == 1 or not parts[-1].strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
                        os.system('clear || cls')
                        print("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é!")
                        continue
                    new_root = parts[-1].strip()
                    self.change_root(new_root)
                elif command.startswith('clear'):
                    os.system('clear || cls')

                else:
                    os.system('clear || cls')
                    print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            except KeyboardInterrupt:
                print("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.disconnect()
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

        self.disconnect()

    def receive_message(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (4 –±–∞–π—Ç–∞)
        length_bytes = self.socket.recv(4)
        if not length_bytes:
            return None
        message_length = struct.unpack('!I', length_bytes)[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        chunks = []
        bytes_received = 0
        while bytes_received < message_length:
            chunk = self.socket.recv(min(message_length - bytes_received, 4096))
            if not chunk:
                break
            chunks.append(chunk)
            bytes_received += len(chunk)
        
        return b''.join(chunks).decode('utf-8')

    def request_directory(self, directory_path: str = None):
        message = f"ls {directory_path}".encode('utf-8')
        try:
            os.system('clear || cls')
            self.socket.send(message)
            response = self.receive_message()
            if response:
                try:
                    files_info = json.loads(response)
                    self.print_directory_tree(files_info)
                except json.JSONDecodeError:
                    print(f"{self.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞{self.RESET}")
        except Exception as e:
            print(f"{self.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}{self.RESET}")

    def change_root(self, new_root: str):
        message = f"cd {new_root}".encode('utf-8')
        try:
            os.system('clear || cls')
            self.socket.send(message)
            response = self.receive_message()
            if response == "–û–ö":
                print(f"–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_root}")
            else:
                print(response)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")

    def print_directory_tree(self, files_info: Dict[str, Union[List[str], List[str]]]):
        if 'error' in files_info:
            print(f"{self.RED}–û—à–∏–±–∫–∞: {files_info['error']}{self.RESET}")
            return
        if 'warning' in files_info:
            print(f"{self.YELLOW}{files_info.pop('warning')}{self.RESET}")
            

        # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º
        current_path = files_info.pop('current_path', '')
        print(f"{self.BLUE}–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_path}{self.RESET}\n")

        for key, value in files_info.items():
            print(f"{self.GREEN}{key}{self.RESET}")
            for d in value['dirs']:
                print(f"\tüìÅ {d}")
            for f in value['files']:
                print(f"\tüìÑ {f}")
            if 'warning' in value:
                print(f"\n{self.YELLOW}{value['warning']}{self.RESET}")

    def disconnect(self):
        self.socket.close()
        print("–û—Ç–∫–ª—é—á–µ–Ω–æ")


if __name__ == "__main__":
    client = Client()
    client.connect()
    client.run()